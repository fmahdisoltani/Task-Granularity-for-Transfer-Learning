paths:
  videos_folder: &vidpath /home/farzaneh/PycharmProjects/pytorch-captioning/sample_data/videos_npz
  checkpoint_folder: /home/farzaneh/PycharmProjects/pytorch-captioning/checkpoint_sample/

  train_annot: &train_annot /home/farzaneh/PycharmProjects/pytorch-captioning/sample_data/json/training_sample.json
  validation_annot: *train_annot
  test_annot: *train_annot

pretrained:
  pretrained_folder:
  pretrained_file:

device:
  synchronize_gpu: &sync True
  gpus: [0]

dataloaders:
  kwargs: {batch_size: &b 16, num_workers: 16, pin_memory: True}

model:
  type: EncoderDecoder
  encoder: FCEncoder
  encoder_args:
  encoder_kwargs: {pretrained_path:,
                   freeze: False}
  decoder: LSTMDecoder
  decoder_args:
  decoder_kwargs: {embedding_size: 256,
                   hidden_size: 256,
                   num_lstm_layers: 1}

loss:
  type: SequenceCrossEntropy

optimizer:
  type: &optimizer Adam
  kwargs: {lr: &lr 0.01 }

training:
  num_epochs: 200
  clip_grad:
  teacher_force: True
  verbose: False

validation:
  frequency: 5
  teacher_force: False
  verbose: True

criteria:
  score: loss
  higher_is_better: False

targets:
  caption_type: template

tokenizer:
  kwargs: {user_maxlen: 10}

scheduler:
  type: ReduceLROnPlateau
  kwargs: {factor: 0.1,
           min_lr: 0.00000001,
           optimizer: *optimizer,
           patience: 3,
           threshold: 0.0001}

logging:
  verbose: True
  tensorboard_frequency: